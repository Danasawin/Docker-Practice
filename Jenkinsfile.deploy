pipeline {
    agent any

    environment {
        IMAGE_NAME_FRONTEND = "myapp-frontend"
        IMAGE_NAME_BACKEND  = "myapp-backend"
        IMAGE_TAG           = "${params.IMAGE_TAG}"           // tag to deploy (e.g. 24)
        LATEST_TAG          = "${params.Push_Tag}"            // alias tag (e.g. latest)
        GAR_REGISTRY        = "${params.DOCKER_REG_URL}"      // e.g. asia-southeast1-docker.pkg.dev
        GCP_PROJECT         = "${params.DOCKER_REG_NAME}"     // e.g. tdg-sec-non-prod-bnxe
        GAR_REPO            = "${params.REG_REPO}"            
    }

    stages {
        stage('GCP AUTH') {
            steps {
                withCredentials([file(credentialsId: 'GCP-GAR', variable: 'GCLOUD_KEY')]) {
                    sh '''
                        echo "Authenticating with GCP..."
                        gcloud auth activate-service-account --key-file=\$GCLOUD_KEY
                        gcloud auth configure-docker \$GAR_REGISTRY
                    '''
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    def frontendImage = "${GAR_REGISTRY}/${GCP_PROJECT}/${GAR_REPO}/${IMAGE_NAME_FRONTEND}:${IMAGE_TAG}"
                    def backendImage  = "${GAR_REGISTRY}/${GCP_PROJECT}/${GAR_REPO}/${IMAGE_NAME_BACKEND}:${IMAGE_TAG}"

                    sh """
                        echo "IMAGE_TAG=${IMAGE_TAG}" > .env

                        echo "Creating docker-compose.yml..."
                        cat <<EOF > docker-compose.yml
version: '3.8'
services:
  frontend:
    image: ${frontendImage}
    ports:
      - "5000:80"
    container_name: frontend-container

  backend:
    image: ${backendImage}
    ports:
      - "3000:3000"
    container_name: backend-container

  database:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

volumes:
  pgdata:
EOF

                        echo "Stopping old containers..."
                        docker compose down || true

                        echo "Pulling updated images..."
                        docker compose pull

                        echo "Starting new containers..."
                        docker compose up -d --force-recreate --remove-orphans

                        docker ps
                    """
                }
            }
        }
    }
}
