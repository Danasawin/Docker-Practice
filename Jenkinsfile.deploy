pipeline {
    agent any


    stages {

        stage('GCP AUTH') {
            steps {
                withCredentials([file(credentialsId: 'GCP-GAR', variable: 'GCLOUD_KEY')]) {
                    sh """
                        echo "Authenticating with GCP..."
                        gcloud auth activate-service-account --key-file="\$GCLOUD_KEY"
                        gcloud auth configure-docker \$GAR_REGISTRY
                    """
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                sh """
                    echo "IMAGE_TAG=${IMAGE_TAG}" > .env

                    echo "Creating docker-compose.yml..."
                    cat <<EOF > docker-compose.yml
version: '3.8'
services:
  frontend:
    image: ${GAR_REGISTRY}/${GCP_PROJECT}/${GAR_REPO}/myapp-frontend:${IMAGE_TAG}
    ports:
      - "5000:80"
    container_name: frontend-container

  backend:
    image: ${GAR_REGISTRY}/${GCP_PROJECT}/${GAR_REPO}/myapp-backend:${IMAGE_TAG}
    ports:
      - "3000:3000"
    container_name: backend-container

  database:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

volumes:
  pgdata:
EOF

                    echo "Shutting down old containers..."
                    docker compose down || true

                    echo "Pulling new images..."
                    docker compose pull --ignore-pull-failures

                    echo "Starting containers..."
                    docker compose up -d --force-recreate --remove-orphans

                    docker ps
                """
            }
        }
    }
}
