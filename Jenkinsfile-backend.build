pipeline {
    agent any

    environment {
        IMAGE_NAME_FRONTEND = "${params.IMAGE_NAME_FRONTEND}" // Not used here
        IMAGE_NAME_BACKEND  = "${params.IMAGE_NAME_BACKEND}"
        IMAGE_TAG           = "${BUILD_NUMBER}"                 // Jenkins build number
        DOCKER_REG_URL      = "${params.DOCKER_REG_URL}"        // e.g. asia-southeast1-docker.pkg.dev
        DOCKER_REG_NAME     = "${params.DOCKER_REG_NAME}"       // e.g. tdg-sec-non-prod-bnxe
        REG_REPO            = "${params.REG_REPO}"              // e.g. docker-images
    }

    stages {
        stage('Checkout Code') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('Check Node & Docker') {
            steps {
                sh '''
                    which node && node -v && npm -v
                    docker --version
                    docker ps
                '''
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh '''
                        echo "Installing backend dependencies..."
                        npm ci
                        echo "Backend build (optional for JS)..."
                        ls -la
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('backend') {
                    sh '''
                        echo "Building backend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_BACKEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_BACKEND
                    '''
                }
            }
        }

        stage('Push Image to GAR') {
            when {
                expression { return params.PushToGar == true }
            }
            steps {
                withCredentials([file(credentialsId: 'GCP-GAR', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                        echo "Authenticating with GCP..."
                        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                        gcloud auth configure-docker $DOCKER_REG_URL

                        echo "Tagging and pushing backend image to GAR..."
                        docker tag $IMAGE_NAME_BACKEND:$IMAGE_TAG $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_BACKEND:$IMAGE_TAG
                        docker push $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_BACKEND:$IMAGE_TAG
                    '''
                }
            }
        }

       stage('Trigger Run Image Container Pipeline') {
          when {
                expression { return params.TriggerRunContainer == true }
            }
    steps {
        script {
            // Use current build number or IMAGE_TAG as tag
            def tagToPass = env.BUILD_NUMBER
            def imageNameBackend = "${IMAGE_NAME_BACKEND}"
            def DOCKER_REG_URL = "${params.DOCKER_REG_URL}"
            def DOCKER_REG_NAME = "${params.DOCKER_REG_NAME}"
            def REG_REPO = "${params.REG_REPO}"

            // Trigger the downstream pipeline, passing IMAGE_TAG parameter
            build job: 'Deploy-Backend-Pipeline', parameters: [
                string(name: 'IMAGE_TAG', value: tagToPass),
                string(name: 'IMAGE_NAME_BACKEND', value: imageNameBackend),
                string(name: 'DOCKER_REG_URL', value: DOCKER_REG_URL),
                string(name: 'DOCKER_REG_NAME', value: DOCKER_REG_NAME),
                string(name: 'REG_REPO', value: REG_REPO)
            ]
        }
    }
}

        stage('Clean up Docker Images Locally') {
            steps {
                sh '''
                    echo "Cleaning up Docker images..."

                    docker rmi $IMAGE_NAME_BACKEND:$IMAGE_TAG || true
                    docker rmi $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_BACKEND:$IMAGE_TAG || true

                    docker image prune -f
                '''
            }
        }
    }
}
