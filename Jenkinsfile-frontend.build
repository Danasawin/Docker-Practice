pipeline {
    agent any

    environment {
        IMAGE_NAME_FRONTEND = "${params.IMAGE_NAME_FRONTEND}"
        IMAGE_NAME_BACKEND  = "${params.IMAGE_NAME_BACKEND}" // Not used in this script
        IMAGE_TAG           = "${BUILD_NUMBER}"              // Jenkins build number
        DOCKER_REG_URL      = "${params.DOCKER_REG_URL}"     // e.g. asia-southeast1-docker.pkg.dev
        DOCKER_REG_NAME     = "${params.DOCKER_REG_NAME}"    // e.g. tdg-sec-non-prod-bnxe
        REG_REPO            = "${params.REG_REPO}"           // e.g. docker-images
    }

    stages {
        stage('Checkout Code') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('Check Node & Docker') {
            steps {
                sh '''
                    which node && node -v && npm -v
                    docker --version
                    docker ps
                '''
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    sh '''
                        echo "Installing frontend dependencies..."
                        npm ci
                        echo "Building frontend..."
                        npm run build
                        ls -la
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('frontend') {
                    sh '''
                        echo "Building frontend Docker image..."
                        docker build --no-cache -t $IMAGE_NAME_FRONTEND:$IMAGE_TAG .
                        docker images | grep $IMAGE_NAME_FRONTEND
                    '''
                }
            }
        }

        stage('Push Image to GAR') {
            when {
                expression { return params.PushToGar == true }
            }
            steps {
                withCredentials([file(credentialsId: 'GCP-GAR', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                        echo "Authenticating with GCP..."
                        gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
                        gcloud auth configure-docker $DOCKER_REG_URL

                        echo "Tagging and pushing backend image to GAR..."
                        docker tag $IMAGE_NAME_BACKEND:$IMAGE_TAG $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_BACKEND:$IMAGE_TAG
                        docker push $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_BACKEND:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Trigger Run Image Container Pipeline') {
            when {
                expression { return params.TriggerRunContainer == true }
            }
            steps {
                script {
                    def tagToPass = env.BUILD_NUMBER
                    build job: 'Deploy Pipeline', parameters: [
                        string(name: 'IMAGE_TAG', value: tagToPass),
                        string(name: 'IMAGE_NAME_BACKEND', value: "${params.IMAGE_NAME_BACKEND}"),
                        string(name: 'DOCKER_REG_URL', value: "${params.DOCKER_REG_URL}"),
                        string(name: 'DOCKER_REG_NAME', value: "${params.DOCKER_REG_NAME}"),
                        string(name: 'REG_REPO', value: "${params.REG_REPO}")
                    ]
                }
            }
        }

        stage('Clean up Docker Images Locally') {
            steps {
                sh '''
                    echo "Cleaning up Docker images..."
                    docker rmi $IMAGE_NAME_BACKEND:$IMAGE_TAG || true
                    docker rmi $DOCKER_REG_URL/$DOCKER_REG_NAME/$REG_REPO/$IMAGE_NAME_BACKEND:$IMAGE_TAG || true
                    docker image prune -f
                '''
            }
        }
    }
}